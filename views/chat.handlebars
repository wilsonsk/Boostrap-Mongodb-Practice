<div class="jumbotron container-fluid row">
	<div class="col-md-6">
		<a href="#">Messages <span class="badge" id="numMessages"></span></a>
		<p></p>
		<div class="chat-body">
			<p><input type="text" disabled="disabled" class="chat-name" value="{{session_name}}"></p>
			<p><div class="chat-messages"></div></p>
			<p><textarea class="chat-textarea" placeholder="Type your message"></textarea></p>
			<p><div class="chat-status">Status: <span>Idle</span></div></p>
			<p><div class="user-list-head">Online Now: <span class="badge" id="numUsers"></span></div></p>
			<p><div class="user-list"></div></p>
		</div>
	</div>	
	<div class="col-md-6">
		<div class="video-body">
			<p><div id="logger">Video Stream Status: <span>Idle</span></div></p>
			<div class="row">
				<div><video src="" id="video" style="width:400px; height:400px;" autoplay="true"></video></div>
				<canvas style="display:none;" id="preview"></canvas>
				<div><img id="videoStream"></div>
				<!-- <div id="streamInfo">Stream Info: <span></span></div -->>
			</div>
		</div>
	</div>
</div>
<script src="/socket.io/socket.io.js"></script>
<script>
	//var socket = io();
	(function(){
		//select a node from DOM
		//document.querySelector() returns the FIRST ELEMENT within the document that matches the specified group of selectors or classes : using depth-first traversal of the document's nodes
		var getNode = function(selector){
			return document.querySelector(selector);
		}

		//Get required nodes
		var chatMessages = getNode('.chat-messages');
		var textarea = getNode('.chat-textarea');
		var chatName = getNode('.chat-name');
		console.log('chat name: ' + chatName.value);
		//node of .chat-status then get span within that node
		var status = getNode('.chat-status span');
		var userList = getNode('.user-list');
		var numMessages = getNode('#numMessages');
/* VIDEO STREAM VARS */
		var canvas = getNode('#preview');
			//var canvas = document.getElementById("preview");
			var context = canvas.getContext("2d");	
			
			canvas.width = 400;
			canvas.height = 400;

			context.width = canvas.width;
			context.height = canvas.height;			
		var streamingImg = getNode('#videoStream');
		var streamInfo = getNode('#streamInfo');
		//node.textContent returns the text content of a node and its decendents
		//statusDefault === 'idle' 
		var statusDefault = status.textContent;			
		
		//set status function: changes status on client
		var setStatus = function(str){
			status.textContent = str;
	
			//reset status.textContent to 'idle' after given time of 3000 ms
			if(str !== statusDefault){
				var delay = setTimeout(function(){
					setStatus(statusDefault);
					//clearInterval(): clears a timer set with setInterval()
					clearInterval(delay);
				}, 3000);
			}
		};

		var setUserList1 = function(user){
			var userEntry = document.createElement('div');
			userEntry.textContent = 'inital list ' + user.user + " entered Chat at " + user.date;
			userList.appendChild(userEntry);
			userList.insertBefore(userEntry, userList.firstChild);
		};
		var setUserList2 = function(user){
			var userEntry = document.createElement('div');
			userEntry.textContent = 'userEntered: ' + user.user + " entered Chat at " + user.date;
			userList.appendChild(userEntry);
			userList.insertBefore(userEntry, userList.firstChild);
		};
		var setUserList3 = function(user){
			var userEntry = document.createElement('div');
			userEntry.textContent = 'update List: ' + user.user + " entered Chat at " + user.date;
			userList.appendChild(userEntry);
			userList.insertBefore(userEntry, userList.firstChild);
		};
		try{
			var socket = io();
		}catch(err){
			if(err){ console.log('error socket not connected to server'); }
		}
		
		if(socket !== undefined){
			console.log('ok!');
/* VIDEO STREAM SCRIPTS */
			function logger(msg){
				$('#logger span').text(msg);
			};
			function logStreamInfo(msg){
				$('#streamInfo span').text(msg);
			};
			function loadCam(stream){
				video.src = window.URL.createObjectURL(stream);
				logger('Camera connected [OK]');
			};
			function loadCamFail(){
				logger('Camera not connected, please turn on camera');
			};
			function viewVideo(video, context){
				context.drawImage(video, 0, 0, context.width, context.height);
				socket.emit('streamIn', canvas.toDataURL('image/webp'));
			};
			$(document).ready(function(){
				//PROMPT USER FOR WEBCAM ACCESS
				navigator.mediaDevices.getUserMedia = (navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mediaDevices.getUserMedia || navigator.msgGetUserMedia);
				if(navigator.mediaDevices.getUserMedia){
					var promise = navigator.mediaDevices.getUserMedia({video : true});
					console.log(promise);
					promise.then(function(stream){
						loadCam(stream);
					});
					promise.catch(function(err){
						loadCamFail();
					});
					setInterval(function(){
						viewVideo(video, context);
					}, 500);
				}
			});
			socket.on('streamOut', function(image){
				streamingImg.src = image;
				logStreamInfo(image);
			});
			
/* CHAT SCRIPTS */
			socket.on('initial_user_list', function(data){
				if(data.length){
					for(var i = 0; i < data.length; i = i + 1){
						setUserList1(data[i]);
					}
				}
			});
			socket.on('userEntered', function(user){
				setStatus(user.user + ' entered Chat');
				setUserList2(user);
			});
			socket.on('update_user_list', function(data){
				if(data.length){
                                	for(var i = (userList.childNodes.length - 1); i < 0; i = i - 1){
						userList.removeChild(userList.childNodes[i]);
                                	}
					for(var i = 0; i < data.length; i = i + 1){
						setUserList3(data[i]);
					}
				}
			});
			socket.on('userExit', function(user){
				setStatus(user + ' exited Chat');
			});
			//listen for 'output' from new user
			//new users get emitted the whole sorted array of db objects while previous clients are not re-emitted that data when first entering the site
			//when a user sends a NEW message, all clients are emitted the message
			socket.on('output', function(data){
				//data is an sorted array of db objects
				console.log(data);
				if(data.length){
					//loop through results
					for(var i = 0; i < data.length; i = i + 1){
						var message = document.createElement('div');
						//set class of message to .chat-message
						message.setAttribute('class', '.chat-message');
						message.textContent = data[i].date + ': ' + data[i].name + ': ' + data[i].message;
						if("{{session_name}}" === data[i].name){
							message.setAttribute("style", "background: lightblue");
						}else{
							message.setAttribute("style", "background: lightcoral");
						}
						//append message to chat-messages Node aka chatMessages div which encapsulates all nodes
						chatMessages.appendChild(message);
						//insert new message before last message: sort in reverse order: 
							//most recent message is at the top due to the last->first sorting of the db content array within the server
						chatMessages.insertBefore(message, chatMessages.firstChild);
					}
					numMessages.textContent = +numMessages.textContent + +data.length;
				}
			});
			
			//listen for status from server	
			socket.on('status', function(data){
				//check type of data returned: if typeof data === object then extract 'message' attribute otherwise just pass in data string
				//typeof data === object WHEN socket.io 'input'handler function within the server validates the input: object contains {"message", "clear"}
				//typeof data !== object (and is therefore a string) WHEN the socket.io 'input' handler function within the server  INvalidates the input: input is a "string"
				setStatus((typeof data === 'object') ? data.message : data);
	
				//data.clear is an attribute that is set within the server in the socket handler for 'input'
				//check if data.clear attribute is true, if so then the client's message was sent therefore clear the message box
				if(data.clear === true){
					textarea.value = '';
				}
			});
		
			//listen for keydown (enter key)
			textarea.addEventListener('keydown', function(event){
				var self = this;	//refers to actual textarea being listened on, aka 'this' object
				var name = chatName.value;
			
				//log which key (via numerical equivalent) was 'evented', in this case keydown
				console.log(self);
				console.log(event.which);
				console.log(event);

				//check for missing fields (name or message)
				/*
				var whiteSpacePattern = /^\s*$/;
		
				if(whiteSpacePattern.test(chatName.value) || whiteSpacePattern.test(self.value)){
					alert('Must Enter Name and Message');
				}else{	*/
				//UPDATE: DO NOT CHECK USER INPUTS ON CLIENT SIDE OR ELSE CLIENT COULD MODIFY WHITESPACE PATTERN ON SOURCE CODE AND THEN SEND INVALID DATA TO SERVER
				
				//Build Date/Time string
				var date = new Date();
				date = date.toDateString() + ' ' + date.toTimeString();
		
				//check for event.which == 13 aka enter key && check if shiftkey was HELD DOWN
				//if shift key held down with enter button keydown, then creates new line on message field node
				if(event.which === 13 && event.shiftKey === false){
					console.log('send');	
					socket.emit('input', {
						user_name: name,
						chat_message: self.value,	
						chat_message_date: date
					});
					event.preventDefault();
				}
				
			});
		}
	})();
</script>

{{{alert}}}
